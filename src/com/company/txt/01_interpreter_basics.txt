(print "
GUI-интерпретатор языка Liscript.

Приложение написано на Java 1.8, и при запуске из командной строки можно в параметре -Xss указать максимальный размер стека одного потока. Если этот параметр не указан, то программа берет его значение по умолчанию в зависимости от версии jvm, но он не очень велик - 512Kb или 1Mb. Каждая команда выполняется интерпретатором в одном отдельном потоке (не создавая подчиненные потоки), и хотя поддерживается оптимизация хвостовых функциональных вызовов (ТСО), функции с глубокой нехвостовой рекурсией могут приводить к переполнению стека потока выполнения. Поэтому в зависимости от требуемой глубины рекурсии запускайте приложение с соответствующим параметром размера стека. Для упрощения этого процесса в каталоге рядом с jar-файлом лежат соответствующие bat-файлы. Также в этом каталоге находится файл стандартной библиотеки lib.txt, который подгружается всегда при старте приложения, и файлы демо-примеров, один из которых сейчас выполняется, показывая этот текст.

Для продолжения нажмите Ctrl+Enter: ")

(read)

(print "
Рабочая область приложения состоит из трех окон:
    - окно вывода результатов (слева вверху, где печатается этот текст)
    - окно ввода команд (слева внизу)
    - окно редактора кода (справа)

Ниже окна ввода подсвечивается имя последнего загруженного файла.
Программа позволяет создавать любое количество независимых рабочих областей, каждая рабочая область располагается на отдельной закладке. Все рабочие области имеют общее глобальное простанство имен.

Выше закладок рабочих областей расположена панель инструментов с кнопками:
    - загрузка файла
    - повторная загрузка последнего загруженного файла
    - добавление новой закладки (новой рабочей области)
    - прерывание задачи (текущего потока выполнения) (Esc)
    - ввод текста из окна ввода (Ctrl+Enter)
    - промотр последних введенных в окне ввода команд (Ctrl+=)
    - запуск на исполнение содержимого окна кода (Ctrl+F1)

Все кнопки работают применительно к текущей рабочей области.

Для продолжения введите в окне ввода какой-нибудь текст (можно пустую строку) и нажмите Ctrl+Enter - ввод многострочный: ")

(read)

(print "
Программа продублировала введенное выражение в окне вывода результатов. Вообще, логика работы интерфейса следующая: каждая рабочая область может находиться в одном из трех режимов:
    - свободного ожидания команд: загрузки файлов, выполнения команд из окона ввода или окна редактирования кода, в этом режиме закладка рабочей области не подсвечивается
    - выполнения команды - закладка подсвечивается серым
    - ожидания ввода пользователя, запрошенное из выполняемого кода (как сейчас) - закладка подсвечивается желтым и также выделяется фон окна ввода

В двух последних режимах недоступны команды, запускающие новую задачу до прерывания текущей.

Ctrl+Enter для продолжения: ")

(read)

(print "
В окнах ввода и редактирования доступны стандартные горячие клавиши копирования-удаления-встаки текста, выделения мышкой и т.п. Различие этих окон в том, что окно ввода всегда очищается после ввода команды/текста, а окно кода - нет. Также, любой инициированный из выполняющегося кода ввод, осуществляется в окне ввода. Дополнительно в этих окнах осуществляется подсветка кода:

    - особые формы собственно языка: желто-зеленым жирным
    - связанные переменные в глобальном пространстве имен: желто-зеленым
    - булевские значения: темно-синим жирным
    - числа: малиновым (маджента)
    - строки: темно-зеленым жирным
    - комментарии: серым курсивом
    - круглые скобки: зеленым

В текущей версии программы в одном моменте подсветка работает не так, как воспринимает текст ее лексический анализатор: это относится к многострочным строкам и комментариям. Лесический анализатор кода воспринимает строки и комментарии многострочными - строка с первой кавычки до следующей кавычки, комментарий - с первой точки с запятой до следующей точки с запятой. А подсветка (для ускорения работы на длинных текстах) воспринимает переводы строк как окончания строк и комментариев. Учитывайте это или используйте однострочные строки/комментарии в парных кавычках.

Вот, собственно и все про интерпретатор. Для ознакомления с основами языка или просмотром демо-примеров можете открыть соответствующие файлы.")

""
